<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learn with Omar on Learn With Omar</title>
    <link>https://omar2cloud.github.io/</link>
    <description>Recent content in Learn with Omar on Learn With Omar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://omar2cloud.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create a Free Domain Name</title>
      <link>https://omar2cloud.github.io/cloudflare/domain/domain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/cloudflare/domain/domain/</guid>
      <description>Tutorial Scenario:  Register a free domain at Freenom Signup for a free account at Cloudflare Add a site to Cloudflare  Step 1: Register a free domain at Freenom:  Navigate to Freenom and create a free account. Select Register a New Domain as show below.  Check the availability of a domain name of your choice. In my case, it&amp;rsquo;s mytunnel. Then, select the free domain TDL  Choose the Period for your selected domain.</description>
    </item>
    
    <item>
      <title>My First Raspberry Pi</title>
      <link>https://omar2cloud.github.io/rasp/myrasp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/myrasp/</guid>
      <description>What is Raspberry Pi (RPI)? The Raspberry Pi is a small single-board computer capable of doing almost everything that an ordinary Linux-based computer can do. Once it connects to an HDMI display, a keyboard, and a mouse, we have have a fully functional computer for a pice of $35 (or even way less for the Raspberry Pi Zero). The Raspberry Pi is widely known and used for home lab environments, where anyone can experiment safely.</description>
    </item>
    
    <item>
      <title>Create a Free Cloudflare Tunnel</title>
      <link>https://omar2cloud.github.io/cloudflare/cloudflared/cloudflare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/cloudflare/cloudflared/cloudflare/</guid>
      <description>Tutorial Scenario:  Signup for a free Cloudflare for Teams. Install and authenticate cloudflared on a Raspberry Pi 4. Create a Cloudflare Tunnel. Configure the Tunnel details. Create DNS records to route traffic to the Tunnel. Run and manage the Tunnel. Add a Zero Trust policy. Run Tunnel as a service.  Step 1: Signup for a free Cloudflare for Teams: Navigate to Cloudflare for Teams and signup for a free account.</description>
    </item>
    
    <item>
      <title>How to Remote into Ubuntu</title>
      <link>https://omar2cloud.github.io/rasp/vino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/vino/</guid>
      <description>What is a Virtual Network Computing (VNC)? VNC is a graphical desktop sharing system that allows you to remotely control the desktop interface from another computer or mobile device (running VNC Viewer). VNC Viewer transmits the keyboard and the mouse events to VNC Server, and receives updates to the screen in return. Setting up a VNC Server on our RPI 4 is very beneficial to gain access to it from another device.</description>
    </item>
    
    <item>
      <title>Install Docker and Portainer on Ubuntu Instance</title>
      <link>https://omar2cloud.github.io/aws/portainer/portainer/portainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/portainer/portainer/portainer/</guid>
      <description>What is Portainer? Portainer is the definitive open source container management tool for Kubernetes, Docker, Docker Swarm and Azure ACI. It allows anyone to deploy and manage containers without the need to write codes. To learn more about Portainer.
Updating the Operating System Now, we have a secured connection with our instance, let&amp;rsquo;s update and upgrade the operating system. Updating and upgrading the operating system of the instance is always a good habit to have.</description>
    </item>
    
    <item>
      <title>Install WordPress Docker</title>
      <link>https://omar2cloud.github.io/aws/portainer/wordpress/_wordpress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/portainer/wordpress/_wordpress/</guid>
      <description>What is WordPress? WordPress is an open source software, which is widely used to create a beautiful website, blog, or app. To learn more about Wordpress.</description>
    </item>
    
    <item>
      <title>Install Unified CloudWatch Agent</title>
      <link>https://omar2cloud.github.io/aws/cloudwatch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/cloudwatch/</guid>
      <description>Install Unified CloudWatch Agent: The unified CloudWatch agent. It enables you to collect both logs and advanced metrics with one agent. It offers support across operating systems, including servers running Windows Server. This agent also provides better performance. The older CloudWatch Logs agent, which supports the collection of logs from only servers running Linux. AWS strongly recommends migrating to the unified CloudWatch agent.
The unified CloudWatch agent enables you to do the following: 1- Collect more system-level metrics from Amazon EC2 instances across operating systems.</description>
    </item>
    
    <item>
      <title>Install x11vnc Server on Ubuntu 20.04 for Remote Access</title>
      <link>https://omar2cloud.github.io/rasp/x11vnc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/x11vnc/</guid>
      <description>What is a X11VNC Server? The Virtual Network Computing (VNC) allows to view and interact with devices remotely with any VNC viewer. When working with multiple RPIs, having VNC servers give us access all our RPIs from one device. There are many VNC servers and X11VNC is one of them. On another tutorial, we will install RealVNC, which is another vnc server, and I will go over the differences between X11VNC and RealVNC.</description>
    </item>
    
    <item>
      <title>install Mattermost and MySQL on EC2</title>
      <link>https://omar2cloud.github.io/aws/mattermost/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/mattermost/</guid>
      <description>Mattermost Mattermost is an open-source, self-hostable online chat service with file sharing, search, and integrations. It is designed as an internal chat for organizations and companies, and mostly markets itself as an open-source alternative to Slack and Microsoft Teams. For information about Mattermost.
As part of this tutorial, we will install and configure MySQL on Ubuntu 20.04 LTS EC2 instance. The intension is implement two different subnets, Public and Private subnets.</description>
    </item>
    
    <item>
      <title>Install RealVNC Server on Ubuntu 20.04 for Remote Access</title>
      <link>https://omar2cloud.github.io/rasp/realvnc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/realvnc/</guid>
      <description>What is a RealVNC Server? RealVNC allows us to interact with our Raspberry Pis graphically via Virtual Network Computing (VNC). The RealVNC server comes preinstalled with the Raspberry Pi OS. It&amp;rsquo;s extremely secure, convenient and reliable. Until the moment of writing this tutorial, 5/15/2021, RealVNC allows us to have up to 5 subscribed devices to remote into via cloud connectivity for FREE. By using this feature, we can remote into our devices from anywhere in the world without a VPN, a port-forwarding or a firewall configuration.</description>
    </item>
    
    <item>
      <title>AWS Lambda Custom Layers and a Lambda Function in Python</title>
      <link>https://omar2cloud.github.io/aws/lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/lambda/</guid>
      <description>What is AWS Lambda? AWS Lambda is a serverless compute service, which allow the user to run codes without provisioning or managing servers. With Lambda, the user does not manage runtimes nor admin the server. Utilizing Lambda is as simple as uploading a code in a ZIP file or a container image, and Lambda automatically allocates compute execution power and runs the code based on the incoming request or event. Lambda functions can be written in many flavors such as, Node.</description>
    </item>
    
    <item>
      <title>Setting UP RPI to Run Headless</title>
      <link>https://omar2cloud.github.io/rasp/headless/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/headless/</guid>
      <description>What is Headless? Headless is the term used when we run our RPI without a monitor or a keyboard. I like to setup and configure my RPI using a monitor at least for the first time only, but if we are hosting a server with no desktop GUI on a RPI, setting up headless is the way to go.
Please, refer to Raspberry Pi Foundation for information on how to setup RPI headless</description>
    </item>
    
    <item>
      <title>Application Load Balancer with Lambda Backend</title>
      <link>https://omar2cloud.github.io/aws/lambda_web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/lambda_web/</guid>
      <description>Application Load Balancer An Application Load Balancer has the ability to send traffic to a specific target group (TG) based on path. The default path is to send all the traffic to a given Target Group.. Usually a TG comprises of infrastructure components either on the cloud (EC2 instances) or from on-prem data-center (via IP).
However, there is an exciting feature by which the target group can contain a lambda function as the backend.</description>
    </item>
    
    <item>
      <title>Docker on Ubuntu 20.04 Raspberry Pi 4</title>
      <link>https://omar2cloud.github.io/rasp/rpidock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/rpidock/</guid>
      <description>As of 11/25/21, if you were unable to install Docker on RPI-4 running Ubuntu 21.10, you may need to install extra kernel modules by running the following command $ sudo apt install linux-modules-extra-raspi
Updating the Operating System Now, we have a secured connection with our instance, let&amp;rsquo;s update and upgrade the operating system. Updating and upgrading the operating system of the instance is always a good habit to have.</description>
    </item>
    
    <item>
      <title>How To Reset My Portainer Password</title>
      <link>https://omar2cloud.github.io/rasp/psswd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/psswd/</guid>
      <description>Resetting Admin password in Portainer running as container Portainer does not have a password reset feature. We will have to you use a password container helper.
1- Firstly, we will stop the Portainer container.
docker container stop portainer2- We will run the helper using the same bind-mount/volume for the data volume
docker run --rm -v portainer_data:/data portainer/helper-reset-passwordThe response should be similar to the below.
2020/06/04 00:13:58 Password succesfully updated for user: admin2020/06/04 00:13:58 Use the following password to login: &amp;amp;_4#\3^5V8vLTd)E&amp;quot;NWiJBs26G*9HPl13- Finally, we will restart the Portainer container.</description>
    </item>
    
    <item>
      <title>Basic Docker Commands</title>
      <link>https://omar2cloud.github.io/rasp/docker-on-ec2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/docker-on-ec2/</guid>
      <description>Basic Commands of Docker The heart of the Docker echo system consists of two parameters: the images and the containers.
To list out the docker processors:
ps -ef | grep [d]ockerTo list out all images on the local machine:
docker imagesTo check for any running containers/processors:
docker ps -aDocker run reference - Foreground vs. Detached Foreground In foreground mode, docker run can start the process in the container and attach the console to the process’s standard input, output, and standard error.</description>
    </item>
    
    <item>
      <title>AWS DynamoDB on Raspberry Pi 4 Running Ubuntu 21.04</title>
      <link>https://omar2cloud.github.io/rasp/dynamodb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/dynamodb/</guid>
      <description>What Is Amazon DynamoDB? Amazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. With DynamoDB, we can create database tables that can store and retrieve any amount of data and serve any level of request traffic. In addition to the Amazon DynamoDB web service, AWS provides a downloadable version of DynamoDB that we can run on our computers and is perfect for development and testing of our code.</description>
    </item>
    
    <item>
      <title>Invoice Processing Application</title>
      <link>https://omar2cloud.github.io/aws/prj2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/prj2/</guid>
      <description>Invoice Processing Application The Invoice Processing Application is to parse the content of the uploaded text format invoices to S3 bucket using a Python custom code running on a Ubuntu EC2 to convert them into CSV records. Once a record is processed, it will be saved in DynamoDB for retention and the converted CSV record is saved in S3 destination bucket. AWS Athena is to query the CSV records to aggregate expenses grouped by date.</description>
    </item>
    
    <item>
      <title>Docker Image on ECS Fargate</title>
      <link>https://omar2cloud.github.io/aws/prj3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/prj3/</guid>
      <description>A Sample Web Application Containerized as a Docker image Deployed on AWS ECS Fargate In this tutorial, we will package and containerize a sample web application as a Docker image running on Apache Tomcat having JRE-8 as a runtime. Then, we will push this new Docker image to our public repository at Dockerhub. The web application, which is packaged into a Docker image will be deployed on AWS ECS Fargate cluster.</description>
    </item>
    
    <item>
      <title>GitLab Runner on RPI-4 (Build, Push Docker images to Docker Hub using GitLab Runner on GitLab)</title>
      <link>https://omar2cloud.github.io/rasp/gitlab_runner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/rasp/gitlab_runner/</guid>
      <description>What is GitLab Runner GitLab Runner is an agent that runs GitLab CI/CD (Continues Integration/Continuous Deployment) jobs in a pipeline. It&amp;rsquo;s heavily utilized in the world of DevOps to provision and configure infrastructure. The GitLab Runner can be installed as a binary on Linux, MacOS or Windows. It can also be installed as a container.
On this tutorial, I will walk through installing and configuring GitLab Runner as a container using a Docker image on a RPI-4.</description>
    </item>
    
    <item>
      <title>Image Analysis with AWS Rekognition</title>
      <link>https://omar2cloud.github.io/aws/rekognition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/rekognition/</guid>
      <description>AWS Rekognition Amazon Rekognition is part of AWS cognitive services, which requires no machine learning expertise to use. It&amp;rsquo;s a simple way to analysis images and videos for any application using proven record of high scalability and deep learning technology. Rekognition technology is utilized to identify and detect objects, shapes, people, texts, and activities in media contents. For more about Amazon Rekognition.
In this tutorial, we will explore the important aspect of AWS Rekognition and practically detect people and text on sample picture and video utilizing boto3 - AWS Python library.</description>
    </item>
    
    <item>
      <title>Create a Simple AWS CodePipeline from S3</title>
      <link>https://omar2cloud.github.io/aws/codepipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/codepipeline/</guid>
      <description>AWS CodePipeline AWS CodePipeline is a continuous delivery service offered by AWS to model, visualize, and automate the release of applications. This service allows for rapid modeling and configuring of different steps of an application release process. It automates the necessary process of change of application deployment. For information about AWS CodePipeline.
Learning Outcomes and Tutorial Scenario: In this tutorial, we will create a two-stage pipeline that uses a versioned S3 bucket and CodeDeploy to release a sample application.</description>
    </item>
    
    <item>
      <title>Create a Static Sample Website on S3 Utilizing AWS CloudFormation</title>
      <link>https://omar2cloud.github.io/aws/s3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/s3/</guid>
      <description>AWS S3 Hosted Website: The objective of tutorial is to host a sample static website on AWS S3, obtain a free domain name from Freenom and assign it to the S3 website and utilize AWS Route 53 as DNS hosting provider. Moreover, an AWS CloudFront distribution is employed to serve the website over AWS&amp;rsquo;s fast content network service with low latency and Lambda@Edge is to add security headers to all web server responses.</description>
    </item>
    
    <item>
      <title>Create a Terraform Template to Spin EC2 Instance from a RaspberryPi 4</title>
      <link>https://omar2cloud.github.io/aws/terraform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/terraform/</guid>
      <description>What is Terraform? Terraform is an Infrastructure as a Code - IaaC- service. It is a tool for building, changing, and versioning infrastructure safely and efficiently. Terraform can manage existing and popular service providers as well as custom in-house solutions. For more information about Terraform.
During this tutorial, we will create a sample Terraform template to spin an AWS EC2 instance from the Command Line Interface (CLI) on a Raspberry Pi 4.</description>
    </item>
    
    <item>
      <title>Create a Simple AWS CodePipeline from CodeCommit and Elastic Beanstalk</title>
      <link>https://omar2cloud.github.io/aws/codecommit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/codecommit/</guid>
      <description>AWS CodeCommit, Elastic Beanstalk and CodePipeline AWS CodeCommit is a fully-managed source control service that hosts secure Git-based repositories. It makes it easy for teams to collaborate on code in a secure and highly scalable ecosystem. CodeCommit eliminates the need to operate your own source control system or worry about scaling its infrastructure. You can use CodeCommit to securely store anything from source code to binaries, and it works seamlessly with your existing Git tools.</description>
    </item>
    
    <item>
      <title>Patching Model using AWS Systems Manager - Patch Manager</title>
      <link>https://omar2cloud.github.io/aws/patchmanager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/patchmanager/</guid>
      <description>Table of Contents  Patching Model using AWS Systems Manager - Patch Manager  AWS Systems Manager Patch Manager  What is the Patch Baseline? How Patch Baseline Rules Work on Amazon Linux 2   Patching Model Solution Architecture   Architecture Diagram   How to Create a Patching Model for a Single Managed Amazon Linux 2 EC2 Instance - Step by Step  Prerequisites  How to Create SSM Documents Create IAM Service Role for Maintenance Window  Create a policy Create IAM resource role   Create and add inline policies to the EC2 IAM instance profile   Step 1: Create a Custom Patch Baseline Step 2: Tagging the EC2 Instance with the Patch Group Key-Value Step 3: Assigning a Patch Group to the Patch Baseline Step 4: Creating a Maintenance Window Step 5: Registering Targets to the Maintenance Window Step 6: Assigning Tasks to the Maintenance Window   Conclusion     July 8th, 2022 AWS Systems Manager Patch Manager Patch Manager is a capability of AWS Systems Manager.</description>
    </item>
    
    <item>
      <title>CDK for Terraform (CDKTF) on AWS</title>
      <link>https://omar2cloud.github.io/aws/cdktf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/aws/cdktf/</guid>
      <description>Table of Contents  Introduction Step 1: Required Prerequisites Step 2: Initializing First CDKTF Project using Python Template Step 3: Configuring an S3 Remote Backend  Option 1: Utilize an existing S3 bucket and DynamoDB to configure the S3 Remote Backend Option 2: Create an S3 Bucket and DynamoDB Table for the S3 Remote Backend using CDKTF   Step 4: Learn How to Use Construct Hub and AWS Provider Submodules  Scenario 1: S3 Bucket Scenario 2: ECS Cluster CDKTF Commands   Step 5: Deploying a Lambda Function URL using CDKTF Conclusion   Sept 27th, 2022 How to Configure an S3 Remote Backend and Deploy a Lambda Function URL using Python on Ubuntu 20.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://omar2cloud.github.io/shortcodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/shortcodes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>https://omar2cloud.github.io/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/credits/</guid>
      <description>Contributors Thanks to them for making Open Source Software a better place !
And a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.
Packages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; horsey - Progressive and customizable autocomplete component clipboard.</description>
    </item>
    
    <item>
      <title>Showcase</title>
      <link>https://omar2cloud.github.io/showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://omar2cloud.github.io/showcase/</guid>
      <description>TAT by OVH Tshark.dev by Ross Jacobs inteliver by Amir Lavasani </description>
    </item>
    
  </channel>
</rss>
